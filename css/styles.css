/* 
# Guía de estilo de front-end

## Diseño

Los diseños se crearon con los siguientes anchos:
- Mobile: 480px
- Desktop: 1440px

## Colores

### Primario
Violeta: #8B48BF
Celeste brillante: #3CDDF3

### Neutro
Azul grisáceo oscuro: #1E1E26
Azul muy oscuro: #232851
Variante gris claro: rgb (249, 249, 249)

## Tipografia

### Body Copy
- Font size: 16px

### Font
- Family: [Be Vietnam Pro](https://fonts.google.com/specimen/Be+Vietnam+Pro)
- Weights: 400, 500, 700

## Icons
Para los íconos sociales, puede usar los íconos provistos o una biblioteca de íconos de fuentes. Ej:

- [Font Awesome](https://fontawesome.com)

## Properties for the flex container
## Properties for the flex items
https://codepen.io/enxaneta/full/adLPwv/
*/
* {
    /* Layout */
    box-sizing: border-box;
    /* Ancho máximo para desktop */
    max-width: 1440px; 
    margin: 0 auto;
    padding: 0;

    /* Typography */
    font-family: 'Be Vietnam Pro', sans-serif;
    font-size: 16px;
    font-style: normal;
}

ul {
    /* Layout */
    margin: 0;
    
    /* Style */
    list-style-type: none;
}

a {
    /* Style */
    text-decoration: none;
}

/* ============================================== */
/* Header */
/* ============================================== */
#encabezado {
    /* Layout */


    /* Style */


    /* Typography */


}

/* -------------------------------------- */
/* Menu */
/* -------------------------------------- */
#menu {
    /* Layout */


    /* Style */


    /* Typography */

    
}
/* -------------------------------------- */


/* ============================================== */
/* Main */
/* ============================================== */
#principal {
    /* Layout */


    /* Style */


    /* Typography */

    
}

/* -------------------------------------- */
/* Hero */
/* -------------------------------------- */
#hero {
    /* Layout */


    /* Style */


    /* Typography */

    
}
/* -------------------------------------- */


/* -------------------------------------- */
/* What´s different between pros? */
/* -------------------------------------- */
#pros {
    /* Layout */


    /* Style */


    /* Typography */

    
}
/* -------------------------------------- */


/* -------------------------------------- */
/* Best of the month */
/* -------------------------------------- */
#best-of-the-month {
    /* Layout */
    height: 800px;
    /* ----------------------------------------------------
    Flex container
    #best-of-the-month

    Flex items del flex container
    h2
    #tarjetas
    #boton-best-month
    ---------------------------------------------------- */
    /* Properties for the flex container */
    /* https://docs.google.com/presentation/d/1-ATTJ0zQartcjxmbNOM-uWh6aYmDdu2kG841ygcngIY/edit#slide=id.gc5e441f28e_0_101 */
    display: flex;
    
    /*
    flex-direction

    Los ítems se disponen en el eje x, de izquierda a derecha.
    Si no le aclaramos la propiedad flex-direction al contenedor,
    row es el valor por defecto.
    */
    flex-direction: column;

    /*
    https://www.w3schools.com/cssref/css3_pr_flex-wrap.php

    The flex-wrap property specifies whether the flexible items
    should wrap or not.

    Note: If the elements are not flexible items,
    the flex-wrap property has no effect.
    */
    /* flex-wrap: wrap; */
    
    /*
    Horizontal

    justify-content
    
    Con esta propiedad alineamos los ítems a lo largo del main axis.
    Si es horizontal, se alinearán en función de la fila. Si es vertical,
    se alinearán en función de la columna.
    */
    justify-content: center; 
    
    /* 
    Vertical

    align-items

    Con esta propiedad alineamos los ítems a lo largo del cross axis.
    Si no aclaramos esta propiedad, el valor por defecto es stretch,
    en otras palabras, los ítems ocuparán todo el espacio disponible
    en el cross axis.
    */
    align-items: space-around; 
    
    /* 
    Vertical
    
    align-content 
    
    Si tenemos un contenedor de una sola línea (donde flex-flow se
    establece como no-wrap) utilizaremos align-items, pero en el caso
    de que estemos trabajando con contenedores multilínea debemos
    utilizar align-content.

    Con esta propiedad alineamos los ítems a lo largo del cross axis
    cuando los contenedores flexibles incluyen de varias líneas
    (donde flex-flow se establece en wrap o wrap-reverse).

    Los valores que admite la propiedad align-content son similares
    a los que podemos utilizar para align-items. Vale la pena probar
    como funcionan ambas propiedades para entenderlas bien.
    */    
    /* align-content: space-around;  */

    /* Style */
    background: #FFF;
}

#best-of-the-month h2 {
    /* Layout */
    margin: 0;

    /* Typography */
    color: #242E53;
    text-align: center;
    font-size: 39.214px;
    font-weight: 700;
    line-height: 156.6%; /* 61.41px */
    letter-spacing: -0.392px;
}

#best-of-the-month #tarjetas {
    /* Layout */
    /* Cancela el margin 0 auto que centra la página web */
    margin-left: 0;
    margin-right: 0;
    margin-top: 100px;
    margin-bottom: 50px;
    /* ----------------------------------------------------
    Flex container
    #tarjetas

    Flex items del flex container
    .contenido
    ---------------------------------------------------- */
    /* Properties for the flex container */
    /* https://docs.google.com/presentation/d/1-ATTJ0zQartcjxmbNOM-uWh6aYmDdu2kG841ygcngIY/edit#slide=id.gc5e441f28e_0_101 */
    display: flex;
    
    /*
    flex-direction

    Los ítems se disponen en el eje x, de izquierda a derecha.
    Si no le aclaramos la propiedad flex-direction al contenedor,
    row es el valor por defecto.
    */
    flex-direction: row;

    /*
    https://www.w3schools.com/cssref/css3_pr_flex-wrap.php

    The flex-wrap property specifies whether the flexible items
    should wrap or not.

    Note: If the elements are not flexible items,
    the flex-wrap property has no effect.
    */
    flex-wrap: wrap;
    
    /*
    Horizontal

    justify-content
    
    Con esta propiedad alineamos los ítems a lo largo del main axis.
    Si es horizontal, se alinearán en función de la fila. Si es vertical,
    se alinearán en función de la columna.
    */
    justify-content: space-around; 
    
    /* 
    Vertical

    align-items

    Con esta propiedad alineamos los ítems a lo largo del cross axis.
    Si no aclaramos esta propiedad, el valor por defecto es stretch,
    en otras palabras, los ítems ocuparán todo el espacio disponible
    en el cross axis.
    */
    /* align-items: flex-end;  */
    
    /* 
    Vertical
    
    align-content 
    
    Si tenemos un contenedor de una sola línea (donde flex-flow se
    establece como no-wrap) utilizaremos align-items, pero en el caso
    de que estemos trabajando con contenedores multilínea debemos
    utilizar align-content.

    Con esta propiedad alineamos los ítems a lo largo del cross axis
    cuando los contenedores flexibles incluyen de varias líneas
    (donde flex-flow se establece en wrap o wrap-reverse).

    Los valores que admite la propiedad align-content son similares
    a los que podemos utilizar para align-items. Vale la pena probar
    como funcionan ambas propiedades para entenderlas bien.
    */    
    /* align-content: space-between;  */
}

#best-of-the-month #tarjetas .contenido {
    /* Layout */
    /* width: 31.5%; */
    width: 420px;
    height: 260px;
    margin: 0;
    padding-top: 50px;
    padding-bottom: 20px;
    padding-left: 20px;
    padding-right: 20px;

    /* ----------------------------------------------------
    Flex container
    .contenido

    Flex items del flex container
    .avatar
    .nombre
    .descripcion
    ---------------------------------------------------- */
    /* Properties for the flex container */
    /* https://docs.google.com/presentation/d/1-ATTJ0zQartcjxmbNOM-uWh6aYmDdu2kG841ygcngIY/edit#slide=id.gc5e441f28e_0_101 */
    display: flex;
    
    /*
    flex-direction

    Los ítems se disponen en el eje x, de izquierda a derecha.
    Si no le aclaramos la propiedad flex-direction al contenedor,
    row es el valor por defecto.
    */
    /* flex-direction: row; */

    /*
    https://www.w3schools.com/cssref/css3_pr_flex-wrap.php

    The flex-wrap property specifies whether the flexible items
    should wrap or not.

    Note: If the elements are not flexible items,
    the flex-wrap property has no effect.
    */
    flex-wrap: wrap;
    
    /*
    Horizontal

    justify-content
    
    Con esta propiedad alineamos los ítems a lo largo del main axis.
    Si es horizontal, se alinearán en función de la fila. Si es vertical,
    se alinearán en función de la columna.
    */
    /* justify-content: flex-start;  */
    
    /* 
    Vertical

    align-items

    Con esta propiedad alineamos los ítems a lo largo del cross axis.
    Si no aclaramos esta propiedad, el valor por defecto es stretch,
    en otras palabras, los ítems ocuparán todo el espacio disponible
    en el cross axis.
    */
    /* align-items: flex-end;  */
    
    /* 
    Vertical
    
    align-content 
    
    Si tenemos un contenedor de una sola línea (donde flex-flow se
    establece como no-wrap) utilizaremos align-items, pero en el caso
    de que estemos trabajando con contenedores multilínea debemos
    utilizar align-content.

    Con esta propiedad alineamos los ítems a lo largo del cross axis
    cuando los contenedores flexibles incluyen de varias líneas
    (donde flex-flow se establece en wrap o wrap-reverse).

    Los valores que admite la propiedad align-content son similares
    a los que podemos utilizar para align-items. Vale la pena probar
    como funcionan ambas propiedades para entenderlas bien.
    */    
    align-content: space-around; 

    /* Style */
    background: #FAFAFA;
    box-shadow: 0px 4px 4px 0px rgba(0, 0, 0, 0.25);

    /*
    position relative + position absolute
    Si nuestras cajas (hijas) están dentro de otra caja (padre), el punto de referencia seguirá siendo el body a menos que hagamos relativa la posición de su padre.
    ¿Cuándo se suele utilizar?
    Cuando queremos sacar un elemento del flujo normal y posicionarlo en un punto fijo con respecto a su contenedor o el body.
    */
    position: relative;
}

#best-of-the-month #tarjetas .contenido .avatar {
    /*
    position relative + position absolute
    Si nuestras cajas (hijas) están dentro de otra caja (padre), el punto de referencia seguirá siendo el body a menos que hagamos relativa la posición de su padre.
    ¿Cuándo se suele utilizar?
    Cuando queremos sacar un elemento del flujo normal y posicionarlo en un punto fijo con respecto a su contenedor o el body.
    */
    position: absolute;
    left: 42%;
    top: -18%;
}

#best-of-the-month #tarjetas .contenido .nombre {
    /* Layout */
    width: 100%;
    margin: 0;

    /* Typography */
    text-align: center;
    color: #3F4868;
    font-size: 16.071px;
    font-weight: 700;
    line-height: 156.6%; /* 25.168px */
    letter-spacing: -0.161px;
}

#best-of-the-month #tarjetas .contenido .descripcion {
    /* Layout */
    width: 100%;
    margin: 0;

    /* Typography */
    color: #B9B9C1;
    text-align: center;
    font-size: 16px;
    font-style: normal;
    font-weight: 500;
    line-height: 156.6%; /* 25.056px */    
}

#best-of-the-month #boton-best-month {
    /* Layout */
    /* Cancela el margin 0 auto que centra la página web */
    margin: 0;

    /* ----------------------------------------------------
    Flex container
    #boton-best-month

    Flex items del flex container
    .boton
    ---------------------------------------------------- */
    /* Properties for the flex container */
    /* https://docs.google.com/presentation/d/1-ATTJ0zQartcjxmbNOM-uWh6aYmDdu2kG841ygcngIY/edit#slide=id.gc5e441f28e_0_101 */
    display: flex;
    
    /*
    flex-direction

    Los ítems se disponen en el eje x, de izquierda a derecha.
    Si no le aclaramos la propiedad flex-direction al contenedor,
    row es el valor por defecto.
    */
    flex-direction: row;

    /*
    https://www.w3schools.com/cssref/css3_pr_flex-wrap.php

    The flex-wrap property specifies whether the flexible items
    should wrap or not.

    Note: If the elements are not flexible items,
    the flex-wrap property has no effect.
    */
    flex-wrap: wrap;
    
    /*
    Horizontal

    justify-content
    
    Con esta propiedad alineamos los ítems a lo largo del main axis.
    Si es horizontal, se alinearán en función de la fila. Si es vertical,
    se alinearán en función de la columna.
    */
    justify-content: center; 
    
    /* 
    Vertical

    align-items

    Con esta propiedad alineamos los ítems a lo largo del cross axis.
    Si no aclaramos esta propiedad, el valor por defecto es stretch,
    en otras palabras, los ítems ocuparán todo el espacio disponible
    en el cross axis.
    */
    /* align-items: stretch;  */
    
    /* 
    Vertical
    
    align-content 
    
    Si tenemos un contenedor de una sola línea (donde flex-flow se
    establece como no-wrap) utilizaremos align-items, pero en el caso
    de que estemos trabajando con contenedores multilínea debemos
    utilizar align-content.

    Con esta propiedad alineamos los ítems a lo largo del cross axis
    cuando los contenedores flexibles incluyen de varias líneas
    (donde flex-flow se establece en wrap o wrap-reverse).

    Los valores que admite la propiedad align-content son similares
    a los que podemos utilizar para align-items. Vale la pena probar
    como funcionan ambas propiedades para entenderlas bien.
    */    
    /* align-content: flex-end;  */
}

#best-of-the-month .boton {
    /* Layout */
    width: 134px;
    height: 44px;
    margin: 0;

    /* Style */
    border-radius: 50px;
    background: rgba(139, 72, 191, 0.70);

    /* Typography */
    color: #FFF;
    font-size: 13.181px;
    font-style: normal;
    font-weight: 500;
    line-height: normal;
}

/* -------------------------------------- */


/* -------------------------------------- */
/* Get to know the best teams of the year */
/* -------------------------------------- */
#best-teams-of-the-year {
    /* Layout */
    height: 224px;
    padding-left: 10%;
    padding-right: 10%;
    padding-top: 56px;
    padding-bottom: 43px;
    /* ----------------------------------------------------
    Flex container
    #teams

    Flex items del flex container
    .teams-leyenda
    .teams-boton
    ---------------------------------------------------- */
    /* Properties for the flex container */
    display: flex;
    flex-direction: row;
    flex-wrap: nowrap;
    /* Horizontal */
    justify-content: flex-start; 
    /* Vertical */
    align-items: flex-start; 
    /* Vertical -> contenedores multilínea debemos utilizar align-content */
    align-content: flex-start; 

    /* Style */
    background: #8B48BF;
}

#best-teams-of-the-year .leyenda {
    /* Layout */
    height: 100%;
    width: 50%;
}

#best-teams-of-the-year .leyenda .get-the-best {
    /* Layout */
    margin: 0;

    /* Typography */
    color: #FFF;
    font-size: 40px;
    font-weight: 700;
    line-height: 119.6%; /* 47.84px */
    letter-spacing: -0.2px;
}

#best-teams-of-the-year .leyenda .get-the-best::after {
    content: " (2023)";
    color: red;
}

#best-teams-of-the-year .boton-best-teams {
    /* Layout */
    height: 100%;
    width: 50%;
}

#best-teams-of-the-year .boton-best-teams .boton {
    /* Layout */
    width: 134px;
    height: 44px;
    margin-left: 80%;
    
    /* Style */
    border-radius: 50px;
    background: #FFF;
    box-shadow: 0px 4px 8px 0px rgba(0, 0, 0, 0.25);

    /* Typography */
    color: #8B48BF;
    font-size: 13.181px;
    font-style: normal;
    font-weight: 500;
    line-height: normal;
}
/* -------------------------------------- */


/* ============================================== */
/* Footer */
/* ============================================== */
#pie-de-pagina {
    /* Layout */
    height: 247px;
    padding-left: 10%;
    padding-right: 10%;
    padding-top: 56px;
    padding-bottom: 43px;
    /* ----------------------------------------------------
    Flex container
    #pie-de-pagina

    Flex items del flex container
    #pie-de-pagina-XXXX
    ---------------------------------------------------- */
    /* Properties for the flex container */
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    /* Horizontal */
    justify-content: space-around; 
    /* Vertical */
    align-items: flex-start; 
    /* Vertical -> contenedores multilínea debemos utilizar align-content */
    align-content: flex-start; 

    /* Style */
    background: #1E1E26;
}

#pie-de-pagina > section {
    /* Layout */
    height: 100%;
    width: 25%;
}


/* -------------------------------------- */
/* Logo */
/* -------------------------------------- */
#pie-de-pagina #logo .sportit {
    /* Layout */
    margin-bottom: 70px;
}

#pie-de-pagina #logo .logo svg {
    /* Layout */
    width: 107.684px;
    height: 25px;
}

#pie-de-pagina #logo .redes-sociales svg {
    /* Layout */
    width: 20px;
    height: 20px;
}

#pie-de-pagina #logo .redes-sociales svg:hover {
    cursor: pointer;
}
/* -------------------------------------- */


/* -------------------------------------- */
/* Menu */
/* -------------------------------------- */
#pie-de-pagina #menu {

}
/* -------------------------------------- */


/* -------------------------------------- */
/* Links */
/* -------------------------------------- */
#pie-de-pagina #links {

}

#pie-de-pagina #menu li,
#pie-de-pagina #links li {
    /* Layout */
    padding-bottom: 12px;
}

#pie-de-pagina #menu a:link,
#pie-de-pagina #links a:link {
    /* Typography */
    color: #FFF;
    font-weight: 400;
    line-height: normal;
}
/* -------------------------------------- */


/* -------------------------------------- */
/* Newsletter */
/* -------------------------------------- */
#pie-de-pagina #newsletter {
    /* Layout */
    /* ----------------------------------------------------
    Flex container
    #pie-de-pagina-call-to-action

    Flex items del flex container
    .newsletter
    .boton
    .copyright
    ---------------------------------------------------- */
    /* Properties for the flex container */
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    /* Horizontal */
    justify-content: flex-start; 
    /* Vertical */
    align-items: flex-start; 
    /* Vertical -> contenedores multilínea debemos utilizar align-content */
    align-content: flex-start; 
}

#pie-de-pagina #newsletter .formulario {
    /* Layout */
    margin-bottom: 80px;
}

#pie-de-pagina #newsletter .formulario .email {
    /* Layout */
    width: 201px;
    height: 44px;
    padding-left: 10px;

    /* Style */
    border-radius: 50px;
    background: #FFF;

    /* Typography */
    color: #A0A0A0;
    font-size: 13.181px;
    font-weight: 600;
    line-height: normal;
}

#pie-de-pagina #newsletter .formulario .boton {
    /* Layout */
    width: 63px;
    height: 44px;
    margin-left: 9px;

    /* Style */
    border-radius: 50px;
    background: #8B48BF;

    /* Typography */
    color: #FFF;
    font-size: 13.181px;
    font-weight: 500;
    line-height: normal;
}

#pie-de-pagina #newsletter .copyright {
    /* Typography */
    color: #8C8C94;
    font-size: 12.5px;
    font-weight: 500;
    line-height: normal;
}
/* -------------------------------------- */


/* -------------------------------------- */
/* hover | Botones, menus, links */
/* -------------------------------------- */
#best-of-the-month .boton:hover,
#best-teams-of-the-year .boton-best-teams .boton:hover,
#pie-de-pagina #menu a:hover,
#pie-de-pagina #links a:hover,
#pie-de-pagina #newsletter .formulario .boton:hover
{
    /* Layout */
    padding: 12px 0px;

    /* Style */
    background: #3CDDF3;
    border: none;
    box-shadow: 7px 6px 28px 1px rgba(0, 0, 0, 0.24);
    cursor: pointer;
    outline: none;
    transition: 0.2s all;

    /* Typography */
    font-size: 22px;
    color: #1E1E26;
    text-decoration: none;
}
